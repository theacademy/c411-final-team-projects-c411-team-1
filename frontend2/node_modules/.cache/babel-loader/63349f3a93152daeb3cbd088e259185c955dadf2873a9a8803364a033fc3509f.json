{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yaraj\\\\Documents\\\\mThree Training\\\\repos\\\\c411-final-team-projects-c411-team-1\\\\frontend2\\\\src\\\\components\\\\dashboard\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport portfolioService from '../../services/portfolioService';\nimport transactionService from '../../services/transactionService';\nimport stockService from '../../services/stockService';\nimport Loading from '../common/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  var _location$state;\n  const [portfolios, setPortfolios] = useState([]);\n  const [recentTransactions, setRecentTransactions] = useState([]);\n  const [portfolioPerformanceData, setPortfolioPerformanceData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n  const userId = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.userId;\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch user portfolios\n        const userPortfolios = await portfolioService.getPortfoliosByUserId(userId);\n        setPortfolios(userPortfolios);\n\n        // Fetch recent transactions\n        const userTransactions = await transactionService.getUserTransactions(userId);\n\n        // Sort transactions by date and take the 5 most recent\n        const sortedTransactions = userTransactions.sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);\n        setRecentTransactions(sortedTransactions);\n\n        // Generate portfolio performance data using transactions\n        await generatePortfolioPerformanceData(userTransactions, userPortfolios);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching dashboard data:', err);\n        setError('Failed to load dashboard data. Please try again later.');\n        setLoading(false);\n      }\n    };\n    fetchDashboardData();\n  }, [userId]);\n\n  // Generate portfolio performance data using transactions\n  const generatePortfolioPerformanceData = async (transactions, portfolios) => {\n    try {\n      // Create a map of dates and portfolio values\n      if (!transactions || transactions.length === 0) {\n        setPortfolioPerformanceData([]);\n        return;\n      }\n\n      // Sort transactions by date (oldest first)\n      const sortedTransactions = [...transactions].sort((a, b) => new Date(a.date) - new Date(b.date));\n\n      // Get the earliest and latest transaction dates\n      const earliestDate = new Date(sortedTransactions[0].date);\n      const latestDate = new Date();\n\n      // Create an array of months between earliest and latest dates\n      const months = [];\n      const currentDate = new Date(earliestDate);\n      currentDate.setDate(1); // Start from the 1st of the month\n\n      while (currentDate <= latestDate) {\n        months.push(new Date(currentDate));\n        currentDate.setMonth(currentDate.getMonth() + 1);\n      }\n\n      // Initialize a running value that will be updated as we process transactions\n      let runningValue = 0;\n\n      // Create performance data points\n      const performanceData = [];\n      for (const month of months) {\n        const monthEnd = new Date(month);\n        monthEnd.setMonth(monthEnd.getMonth() + 1);\n        monthEnd.setDate(0); // Last day of the month\n\n        // Calculate portfolio value at the end of this month\n        // by processing all transactions up to this point\n        const relevantTransactions = sortedTransactions.filter(transaction => new Date(transaction.date) <= monthEnd);\n\n        // Recalculate portfolio value based on transactions\n        // This is a simplified approach - in real life you would track individual stock prices\n        let monthValue = 0;\n\n        // If we have portfolio data, use it for the most recent month\n        if (month.getMonth() === latestDate.getMonth() && month.getFullYear() === latestDate.getFullYear() && portfolios && portfolios.length > 0) {\n          // Use the current portfolio total values\n          monthValue = portfolios.reduce((total, portfolio) => total + parseFloat(portfolio.total || 0), 0);\n        } else {\n          // For past months, estimate based on transactions\n          // Group transactions by portfolio and stock\n          const portfolioStocks = {};\n          for (const transaction of relevantTransactions) {\n            var _transaction$portfoli, _transaction$stock;\n            const portfolioId = (_transaction$portfoli = transaction.portfolio) === null || _transaction$portfoli === void 0 ? void 0 : _transaction$portfoli.portfolioId;\n            const stockSymbol = (_transaction$stock = transaction.stock) === null || _transaction$stock === void 0 ? void 0 : _transaction$stock.symbol;\n            if (!portfolioId || !stockSymbol) continue;\n            if (!portfolioStocks[portfolioId]) {\n              portfolioStocks[portfolioId] = {};\n            }\n            if (!portfolioStocks[portfolioId][stockSymbol]) {\n              portfolioStocks[portfolioId][stockSymbol] = {\n                quantity: 0,\n                avgPrice: 0,\n                totalCost: 0\n              };\n            }\n            const stockInfo = portfolioStocks[portfolioId][stockSymbol];\n            if (transaction.transactionType === 'BUY') {\n              const transactionValue = transaction.quantity * parseFloat(transaction.price);\n              const newTotalCost = stockInfo.totalCost + transactionValue;\n              const newQuantity = stockInfo.quantity + transaction.quantity;\n              stockInfo.quantity = newQuantity;\n              stockInfo.totalCost = newTotalCost;\n              stockInfo.avgPrice = newTotalCost / newQuantity;\n            } else if (transaction.transactionType === 'SELL') {\n              // For sells, we reduce quantity but maintain the average price\n              stockInfo.quantity -= transaction.quantity;\n\n              // If quantity becomes 0 or negative, reset avgPrice and totalCost\n              if (stockInfo.quantity <= 0) {\n                stockInfo.quantity = 0;\n                stockInfo.avgPrice = 0;\n                stockInfo.totalCost = 0;\n              }\n            }\n          }\n\n          // Calculate total value based on quantities and average prices\n          for (const portfolioId in portfolioStocks) {\n            for (const stockSymbol in portfolioStocks[portfolioId]) {\n              const stockInfo = portfolioStocks[portfolioId][stockSymbol];\n              monthValue += stockInfo.quantity * stockInfo.avgPrice;\n            }\n          }\n        }\n        performanceData.push({\n          name: month.toLocaleDateString('default', {\n            month: 'short',\n            year: 'numeric'\n          }),\n          value: monthValue,\n          date: month // Keep the actual date for sorting\n        });\n      }\n\n      // Sort by date to ensure chronological order\n      performanceData.sort((a, b) => a.date - b.date);\n\n      // Remove the date field which was only used for sorting\n      const finalData = performanceData.map(({\n        name,\n        value\n      }) => ({\n        name,\n        value\n      }));\n      setPortfolioPerformanceData(finalData);\n    } catch (error) {\n      console.error('Error generating portfolio performance data:', error);\n      // Fallback to empty data\n      setPortfolioPerformanceData([]);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 25\n  }, this);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Calculate total portfolio value\n  const totalPortfolioValue = portfolios.reduce((total, portfolio) => total + parseFloat(portfolio.total || 0), 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-summary\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Portfolio Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Total Value:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 28\n            }, this), \" $\", totalPortfolioValue.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Number of Portfolios:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 28\n            }, this), \" \", portfolios.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/portfolios\",\n            className: \"btn btn-primary\",\n            children: \"View All Portfolios\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-chart\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Portfolio Performance Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: portfolioPerformanceData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 300,\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              data: portfolioPerformanceData,\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`$${value.toFixed(2)}`, 'Portfolio Value']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"value\",\n                stroke: \"#0d6efd\",\n                activeDot: {\n                  r: 8\n                },\n                name: \"Portfolio Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center p-4\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No performance data available yet. Start trading to see your portfolio growth!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-recent-transactions\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Recent Transactions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [recentTransactions.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Stock\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Quantity\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Total\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: recentTransactions.map(transaction => {\n                var _transaction$stock2;\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: new Date(transaction.date).toLocaleDateString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: (_transaction$stock2 = transaction.stock) === null || _transaction$stock2 === void 0 ? void 0 : _transaction$stock2.symbol\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 279,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: transaction.transactionType === 'BUY' ? 'text-success' : 'text-danger',\n                    children: transaction.transactionType\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: transaction.quantity\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [\"$\", parseFloat(transaction.price).toFixed(2)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [\"$\", (parseFloat(transaction.price) * transaction.quantity).toFixed(2)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 285,\n                    columnNumber: 41\n                  }, this)]\n                }, transaction.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 37\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No recent transactions. Start trading to see your transaction history!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/transactions\",\n            className: \"btn btn-primary\",\n            children: \"View All Transactions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"lNiWExlgKMjJkzakSkGKWDjuHWk=\", false, function () {\n  return [useLocation];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","portfolioService","transactionService","stockService","Loading","jsxDEV","_jsxDEV","Dashboard","_s","_location$state","portfolios","setPortfolios","recentTransactions","setRecentTransactions","portfolioPerformanceData","setPortfolioPerformanceData","loading","setLoading","error","setError","location","userId","state","fetchDashboardData","userPortfolios","getPortfoliosByUserId","userTransactions","getUserTransactions","sortedTransactions","sort","a","b","Date","date","slice","generatePortfolioPerformanceData","err","console","transactions","length","earliestDate","latestDate","months","currentDate","setDate","push","setMonth","getMonth","runningValue","performanceData","month","monthEnd","relevantTransactions","filter","transaction","monthValue","getFullYear","reduce","total","portfolio","parseFloat","portfolioStocks","_transaction$portfoli","_transaction$stock","portfolioId","stockSymbol","stock","symbol","quantity","avgPrice","totalCost","stockInfo","transactionType","transactionValue","price","newTotalCost","newQuantity","name","toLocaleDateString","year","value","finalData","map","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","window","reload","totalPortfolioValue","toFixed","to","width","height","data","strokeDasharray","dataKey","formatter","type","stroke","activeDot","r","_transaction$stock2","id","_c","$RefreshReg$"],"sources":["C:/Users/yaraj/Documents/mThree Training/repos/c411-final-team-projects-c411-team-1/frontend2/src/components/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport portfolioService from '../../services/portfolioService';\r\nimport transactionService from '../../services/transactionService';\r\nimport stockService from '../../services/stockService';\r\nimport Loading from '../common/Loading';\r\n\r\nconst Dashboard = ( ) => {\r\n    const [portfolios, setPortfolios] = useState([]);\r\n    const [recentTransactions, setRecentTransactions] = useState([]);\r\n    const [portfolioPerformanceData, setPortfolioPerformanceData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const location = useLocation();\r\n    const userId = location.state?.userId;\r\n\r\n    useEffect(() => {\r\n        const fetchDashboardData = async () => {\r\n            try {\r\n                setLoading(true);\r\n\r\n                // Fetch user portfolios\r\n                const userPortfolios = await portfolioService.getPortfoliosByUserId(userId);\r\n                setPortfolios(userPortfolios);\r\n\r\n                // Fetch recent transactions\r\n                const userTransactions = await transactionService.getUserTransactions(userId);\r\n\r\n                // Sort transactions by date and take the 5 most recent\r\n                const sortedTransactions = userTransactions\r\n                    .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n                    .slice(0, 5);\r\n\r\n                setRecentTransactions(sortedTransactions);\r\n\r\n                // Generate portfolio performance data using transactions\r\n                await generatePortfolioPerformanceData(userTransactions, userPortfolios);\r\n\r\n                setLoading(false);\r\n            } catch (err) {\r\n                console.error('Error fetching dashboard data:', err);\r\n                setError('Failed to load dashboard data. Please try again later.');\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchDashboardData();\r\n    }, [userId]);\r\n\r\n    // Generate portfolio performance data using transactions\r\n    const generatePortfolioPerformanceData = async (transactions, portfolios) => {\r\n        try {\r\n            // Create a map of dates and portfolio values\r\n            if (!transactions || transactions.length === 0) {\r\n                setPortfolioPerformanceData([]);\r\n                return;\r\n            }\r\n\r\n            // Sort transactions by date (oldest first)\r\n            const sortedTransactions = [...transactions].sort(\r\n                (a, b) => new Date(a.date) - new Date(b.date)\r\n            );\r\n\r\n            // Get the earliest and latest transaction dates\r\n            const earliestDate = new Date(sortedTransactions[0].date);\r\n            const latestDate = new Date();\r\n\r\n            // Create an array of months between earliest and latest dates\r\n            const months = [];\r\n            const currentDate = new Date(earliestDate);\r\n            currentDate.setDate(1); // Start from the 1st of the month\r\n\r\n            while (currentDate <= latestDate) {\r\n                months.push(new Date(currentDate));\r\n                currentDate.setMonth(currentDate.getMonth() + 1);\r\n            }\r\n\r\n            // Initialize a running value that will be updated as we process transactions\r\n            let runningValue = 0;\r\n\r\n            // Create performance data points\r\n            const performanceData = [];\r\n\r\n            for (const month of months) {\r\n                const monthEnd = new Date(month);\r\n                monthEnd.setMonth(monthEnd.getMonth() + 1);\r\n                monthEnd.setDate(0); // Last day of the month\r\n\r\n                // Calculate portfolio value at the end of this month\r\n                // by processing all transactions up to this point\r\n                const relevantTransactions = sortedTransactions.filter(\r\n                    transaction => new Date(transaction.date) <= monthEnd\r\n                );\r\n\r\n                // Recalculate portfolio value based on transactions\r\n                // This is a simplified approach - in real life you would track individual stock prices\r\n                let monthValue = 0;\r\n\r\n                // If we have portfolio data, use it for the most recent month\r\n                if (month.getMonth() === latestDate.getMonth() &&\r\n                    month.getFullYear() === latestDate.getFullYear() &&\r\n                    portfolios && portfolios.length > 0) {\r\n                    // Use the current portfolio total values\r\n                    monthValue = portfolios.reduce(\r\n                        (total, portfolio) => total + parseFloat(portfolio.total || 0), 0\r\n                    );\r\n                } else {\r\n                    // For past months, estimate based on transactions\r\n                    // Group transactions by portfolio and stock\r\n                    const portfolioStocks = {};\r\n\r\n                    for (const transaction of relevantTransactions) {\r\n                        const portfolioId = transaction.portfolio?.portfolioId;\r\n                        const stockSymbol = transaction.stock?.symbol;\r\n\r\n                        if (!portfolioId || !stockSymbol) continue;\r\n\r\n                        if (!portfolioStocks[portfolioId]) {\r\n                            portfolioStocks[portfolioId] = {};\r\n                        }\r\n\r\n                        if (!portfolioStocks[portfolioId][stockSymbol]) {\r\n                            portfolioStocks[portfolioId][stockSymbol] = {\r\n                                quantity: 0,\r\n                                avgPrice: 0,\r\n                                totalCost: 0\r\n                            };\r\n                        }\r\n\r\n                        const stockInfo = portfolioStocks[portfolioId][stockSymbol];\r\n\r\n                        if (transaction.transactionType === 'BUY') {\r\n                            const transactionValue = transaction.quantity * parseFloat(transaction.price);\r\n                            const newTotalCost = stockInfo.totalCost + transactionValue;\r\n                            const newQuantity = stockInfo.quantity + transaction.quantity;\r\n\r\n                            stockInfo.quantity = newQuantity;\r\n                            stockInfo.totalCost = newTotalCost;\r\n                            stockInfo.avgPrice = newTotalCost / newQuantity;\r\n                        } else if (transaction.transactionType === 'SELL') {\r\n                            // For sells, we reduce quantity but maintain the average price\r\n                            stockInfo.quantity -= transaction.quantity;\r\n\r\n                            // If quantity becomes 0 or negative, reset avgPrice and totalCost\r\n                            if (stockInfo.quantity <= 0) {\r\n                                stockInfo.quantity = 0;\r\n                                stockInfo.avgPrice = 0;\r\n                                stockInfo.totalCost = 0;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Calculate total value based on quantities and average prices\r\n                    for (const portfolioId in portfolioStocks) {\r\n                        for (const stockSymbol in portfolioStocks[portfolioId]) {\r\n                            const stockInfo = portfolioStocks[portfolioId][stockSymbol];\r\n                            monthValue += stockInfo.quantity * stockInfo.avgPrice;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                performanceData.push({\r\n                    name: month.toLocaleDateString('default', { month: 'short', year: 'numeric' }),\r\n                    value: monthValue,\r\n                    date: month // Keep the actual date for sorting\r\n                });\r\n            }\r\n\r\n            // Sort by date to ensure chronological order\r\n            performanceData.sort((a, b) => a.date - b.date);\r\n\r\n            // Remove the date field which was only used for sorting\r\n            const finalData = performanceData.map(({ name, value }) => ({ name, value }));\r\n\r\n            setPortfolioPerformanceData(finalData);\r\n        } catch (error) {\r\n            console.error('Error generating portfolio performance data:', error);\r\n            // Fallback to empty data\r\n            setPortfolioPerformanceData([]);\r\n        }\r\n    };\r\n\r\n    if (loading) return <Loading />;\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"error-container\">\r\n                <p className=\"error-message\">{error}</p>\r\n                <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => window.location.reload()}\r\n                >\r\n                    Retry\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Calculate total portfolio value\r\n    const totalPortfolioValue = portfolios.reduce(\r\n        (total, portfolio) => total + parseFloat(portfolio.total || 0),\r\n        0\r\n    );\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <h1>Dashboard</h1>\r\n\r\n            <div className=\"dashboard-summary\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h3>Portfolio Summary</h3>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p><strong>Total Value:</strong> ${totalPortfolioValue.toFixed(2)}</p>\r\n                        <p><strong>Number of Portfolios:</strong> {portfolios.length}</p>\r\n                        <Link to=\"/portfolios\" className=\"btn btn-primary\">View All Portfolios</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"dashboard-chart\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h3>Portfolio Performance Over Time</h3>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        {portfolioPerformanceData.length > 0 ? (\r\n                            <ResponsiveContainer width=\"100%\" height={300}>\r\n                                <LineChart data={portfolioPerformanceData}>\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"name\" />\r\n                                    <YAxis />\r\n                                    <Tooltip\r\n                                        formatter={(value) => [`$${value.toFixed(2)}`, 'Portfolio Value']}\r\n                                    />\r\n                                    <Legend />\r\n                                    <Line\r\n                                        type=\"monotone\"\r\n                                        dataKey=\"value\"\r\n                                        stroke=\"#0d6efd\"\r\n                                        activeDot={{ r: 8 }}\r\n                                        name=\"Portfolio Value\"\r\n                                    />\r\n                                </LineChart>\r\n                            </ResponsiveContainer>\r\n                        ) : (\r\n                            <div className=\"text-center p-4\">\r\n                                <p>No performance data available yet. Start trading to see your portfolio growth!</p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"dashboard-recent-transactions\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h3>Recent Transactions</h3>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        {recentTransactions.length > 0 ? (\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Date</th>\r\n                                    <th>Stock</th>\r\n                                    <th>Type</th>\r\n                                    <th>Quantity</th>\r\n                                    <th>Price</th>\r\n                                    <th>Total</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {recentTransactions.map((transaction) => (\r\n                                    <tr key={transaction.id}>\r\n                                        <td>{new Date(transaction.date).toLocaleDateString()}</td>\r\n                                        <td>{transaction.stock?.symbol}</td>\r\n                                        <td className={transaction.transactionType === 'BUY' ? 'text-success' : 'text-danger'}>\r\n                                            {transaction.transactionType}\r\n                                        </td>\r\n                                        <td>{transaction.quantity}</td>\r\n                                        <td>${parseFloat(transaction.price).toFixed(2)}</td>\r\n                                        <td>${(parseFloat(transaction.price) * transaction.quantity).toFixed(2)}</td>\r\n                                    </tr>\r\n                                ))}\r\n                                </tbody>\r\n                            </table>\r\n                        ) : (\r\n                            <p>No recent transactions. Start trading to see your transaction history!</p>\r\n                        )}\r\n                        <Link to=\"/transactions\" className=\"btn btn-primary\">View All Transactions</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}